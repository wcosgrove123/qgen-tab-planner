/**
 * Instructions Extractor Module
 * Extracts additional table instructions from various sources
 */

// Main instruction extraction function
export function getTabInstructions(question) {
    try {
        // Primary source: Tab Plan textarea (from the Tab Plan tab in editor)
        const tabPlanInstructions = getTabPlanTextarea(question);
        if (tabPlanInstructions) return tabPlanInstructions;

        // Secondary: Auto-generated based on question type
        const autoInstructions = getAutoGeneratedInstructions(question);
        if (autoInstructions) return autoInstructions;

        return '';
    } catch (error) {
        console.warn('Error extracting instructions for', question.id, error);
        return '';
    }
}

// Extract from Tab Plan textarea (primary source)
function getTabPlanTextarea(question) {
    // Primary: From the Tab Plan tab's "Tabulation Instructions" textarea
    const tabInstructions = question.tab?.instructions || '';
    if (tabInstructions) return tabInstructions;

    // Secondary: From question notes field
    const questionNotes = question.notes || '';
    if (questionNotes) return questionNotes;

    return '';
}

// Generate automatic instructions based on question type
function getAutoGeneratedInstructions(question) {
    const type = question.type?.toLowerCase() || '';

    // Likert scale auto-instructions (matching Python logic)
    if (isLikertQuestion(question)) {
        return getLikertInstructions(question);
    }

    // Grid/table instructions
    if (type.includes('grid') || type.includes('table')) {
        return getGridInstructions(question);
    }

    // Numeric instructions
    if (type.startsWith('numeric')) {
        return getNumericInstructions(question);
    }

    return '';
}

// Likert-specific instructions (matching Python tabplan_writer.py)
function getLikertInstructions(question) {
    const statements = question.statements || [];

    if (statements.length <= 2) {
        // Simple Likert: just nets
        return '';
    } else {
        // Complex Likert: means + individual tables
        return 'Provide mean, show 1 table for each statement';
    }
}

// Grid/table instructions
function getGridInstructions(question) {
    const grid = question.grid || {};
    const rows = grid.rows || [];
    const cols = grid.cols || [];

    const instructions = [];

    // Large grid warnings
    if (rows.length > 10 || cols.length > 10) {
        instructions.push('Large grid - consider breaking into multiple tables');
    }

    // Source-based grids
    if (grid.columnSource) {
        instructions.push(`Columns sourced from ${grid.columnSource.qid}`);
    }

    if (grid.rowSource) {
        instructions.push(`Rows sourced from ${grid.rowSource.qid}`);
    }

    return instructions.join('. ');
}

// Numeric instructions
function getNumericInstructions(question) {
    const instructions = [];

    // Always include means/medians for numeric
    instructions.push('Provide means and medians');

    // Statistical significance
    instructions.push('Include statistical significance testing');

    return instructions.join('. ');
}

// Future: Advanced table instructions
export function getAdvancedTableInstructions(question) {
    const advancedTable = question.advancedTable;
    if (!advancedTable) return getTabInstructions(question);

    const instructions = [];

    // Multi-source table instructions
    if (advancedTable.rowSource && advancedTable.colSource) {
        instructions.push(`Matrix table: rows from ${advancedTable.rowSource.qid}, columns from ${advancedTable.colSource.qid}`);
    }

    // Conditional logic instructions
    if (advancedTable.conditionalLogic?.length) {
        instructions.push('Includes conditional logic - see base definitions');
    }

    // Custom processing requirements
    if (advancedTable.customProcessors?.length) {
        instructions.push(`Requires custom processing: ${advancedTable.customProcessors.join(', ')}`);
    }

    // Export-specific instructions
    if (advancedTable.exportSettings) {
        const settings = advancedTable.exportSettings;
        if (settings.multiSheet) {
            instructions.push('Export to multiple sheets');
        }
        if (settings.customFormat) {
            instructions.push(`Custom format: ${settings.customFormat}`);
        }
    }

    return instructions.join('. ') || getTabInstructions(question);
}

// Future: Conditional instructions based on rules
export function getConditionalInstructions(question) {
    const conditionalRules = question.tabPlan?.conditionalInstructions || [];

    for (const rule of conditionalRules) {
        if (evaluateCondition(rule.condition, question)) {
            return rule.instruction;
        }
    }

    return getTabInstructions(question);
}

// Helper: Check if question is Likert
function isLikertQuestion(question) {
    const type = question.type?.toLowerCase() || '';
    const hasStatements = question.statements?.length > 0;
    const hasScale = question.scale?.labels?.length > 0;

    return type.startsWith('likert') || (hasStatements && hasScale);
}

// Helper: Evaluate conditional rules (placeholder for future)
function evaluateCondition(condition, question) {
    // Future: Implement condition evaluation
    // Examples:
    // - "IF grid_size > 5x5"
    // - "IF has_open_ends"
    // - "IF question_type = multi_matrix"
    return false;
}

// Export utilities
export {
    getTabPlanTextarea,
    getAutoGeneratedInstructions,
    getLikertInstructions,
    getGridInstructions,
    getNumericInstructions
};